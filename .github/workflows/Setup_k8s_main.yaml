name: Setup K8s Main

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  setup-control-plane:
    runs-on: [ self-hosted, centos ]

    steps:
    - name: Set up SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.VM_HOST }} >> ~/.ssh/known_hosts

    - name: Install dependencies
      run: |
        ssh ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} \
          "sudo yum update -y && sudo yum install -y yum-utils device-mapper-persistent-data lvm2 curl"

    - name: Disable SELinux
      run: |
        ssh ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} \
          "sudo setenforce 0 && sudo sed -i 's/^SELINUX=enforcing/SELINUX=permissive/' /etc/selinux/config"

    - name: Disable swap
      run: |
        ssh ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} \
          "sudo swapoff -a && sudo sed -i '/ swap / s/^/#/' /etc/fstab"

    - name: Load br_netfilter module
      run: |
        ssh ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} \
          "sudo modprobe br_netfilter && echo 'br_netfilter' | sudo tee /etc/modules-load.d/k8s.conf"

    - name: Configure sysctl for Kubernetes networking
      run: |
        ssh ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} \
          "echo 'net.bridge.bridge-nf-call-ip6tables = 1' | sudo tee /etc/sysctl.d/k8s.conf && \
           echo 'net.bridge.bridge-nf-call-iptables = 1' | sudo tee -a /etc/sysctl.d/k8s.conf && \
           echo 'net.ipv4.ip_forward = 1' | sudo tee -a /etc/sysctl.d/k8s.conf && \
           sudo sysctl --system"

    - name: Add Kubernetes YUM repo
      run: |
        ssh ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} << 'EOF'
        cat <<EOF2 | sudo tee /etc/yum.repos.d/kubernetes.repo
        [kubernetes]
        name=Kubernetes
        baseurl=https://pkgs.k8s.io/core:/stable:/v1.30/rpm/
        enabled=1
        gpgcheck=1
        repo_gpgcheck=1
        gpgkey=https://pkgs.k8s.io/core:/stable:/v1.30/rpm/repodata/repomd.xml.key
        EOF2
        EOF

    - name: Update YUM cache
      run: |
        ssh ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} \
          "sudo yum clean all && sudo yum makecache --refresh"

    - name: Install containerd
      run: |
        ssh ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} \
          "sudo yum install -y containerd && sudo mkdir -p /etc/containerd && sudo containerd config default | sudo tee /etc/containerd/config.toml && \
           sudo sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml && \
           sudo systemctl restart containerd && sudo systemctl enable --now containerd"

    - name: Install Kubernetes tools
      run: |
        ssh ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} \
          "sudo yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes && sudo systemctl enable --now kubelet"

    - name: Turn off firewall (optional, for lab/demo)
      run: |
        ssh ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} \
          "sudo systemctl stop firewalld && sudo systemctl disable firewalld"

    - name: Initialize Kubernetes master node
      run: |
        ssh ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} \
          "sudo kubeadm init --pod-network-cidr=${{ secrets.POD_NETWORK_CIDR }}"

    - name: Set up kubectl config for regular user
      run: |
        ssh ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} \
          "mkdir -p ~/.kube && sudo cp -i /etc/kubernetes/admin.conf ~/.kube/config && sudo chown $(id -u):$(id -g) ~/.kube/config"

    - name: Install Flannel network plugin (example)
      run: |
        ssh ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} \
          "kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml"

    - name: Install Kubernetes Dashboard
      run: |
        ssh ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} \
          "kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml"

    - name: Output join command
      run: |
        ssh ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} \
          "kubeadm token create --print-join-command"
