name: Setup Kubernetes Control Plane

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  setup-k8s-control-plane:
    runs-on: self-hosted

    steps:
      - name: Prepare SSH Key and Known Hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "${{ secrets.VM_HOST }}" >> ~/.ssh/known_hosts

      - name: Install Kubernetes Tools (Debian)
        if: runner.os == 'Linux'
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.VM_HOST }} "test -f /etc/debian_version"
          
      - name: Setup Kubernetes on Debian-based system
        if: runner.os == 'Linux'
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.VM_HOST }} "sudo apt-get update"
          ssh ${{ secrets.SSH_USER }}@${{ secrets.VM_HOST }} "sudo apt-get install -y apt-transport-https ca-certificates curl gnupg"
          ssh ${{ secrets.SSH_USER }}@${{ secrets.VM_HOST }} "sudo mkdir -p /etc/apt/keyrings"
          ssh ${{ secrets.SSH_USER }}@${{ secrets.VM_HOST }} "curl -fsSLo /etc/apt/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg"
          ssh ${{ secrets.SSH_USER }}@${{ secrets.VM_HOST }} "echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main' | sudo tee /etc/apt/sources.list.d/kubernetes.list"
          ssh ${{ secrets.SSH_USER }}@${{ secrets.VM_HOST }} "sudo apt-get update"
          ssh ${{ secrets.SSH_USER }}@${{ secrets.VM_HOST }} "sudo apt-get install -y kubelet kubeadm kubectl"
          ssh ${{ secrets.SSH_USER }}@${{ secrets.VM_HOST }} "sudo apt-mark hold kubelet kubeadm kubectl"

      - name: Install Kubernetes Tools (CentOS)
        if: runner.os == 'Linux'
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.VM_HOST }} "test -f /etc/centos-release || test -f /etc/redhat-release"
          ssh ${{ secrets.SSH_USER }}@${{ secrets.VM_HOST }} "sudo yum install -y yum-utils device-mapper-persistent-data lvm2 curl"
          ssh ${{ secrets.SSH_USER }}@${{ secrets.VM_HOST }} "echo '[kubernetes]
            name=Kubernetes
            baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-\$basearch
            enabled=1
            gpgcheck=1
            repo_gpgcheck=1
            gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg' | sudo tee /etc/yum.repos.d/kubernetes.repo"
          ssh ${{ secrets.SSH_USER }}@${{ secrets.VM_HOST }} "sudo yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes"
          ssh ${{ secrets.SSH_USER }}@${{ secrets.VM_HOST }} "sudo systemctl enable --now kubelet"


      - name: Disable Swap
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.VM_HOST }} "sudo swapoff -a && sudo sed -i '/ swap / s/^/#/' /etc/fstab"

      - name: Initialize Kubernetes Control Plane
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.VM_HOST }} <<'EOF'
            sudo kubeadm init --pod-network-cidr=192.168.0.0/16

            # Set up kubectl config
            mkdir -p ~/.kube
            sudo cp /etc/kubernetes/admin.conf ~/.kube/config
            sudo chown $(id -u):$(id -g) ~/.kube/config
          EOF

      - name: Install Pod Network (Calico)
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.VM_HOST }} "kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.27.0/manifests/calico.yaml"

      - name: Install Kubernetes Dashboard
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.VM_HOST }} "kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml"

      - name: Create Admin User and Bind Role
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.VM_HOST }} <<'EOF'
            cat <<EOF2 | kubectl apply -f -
            apiVersion: v1
            kind: ServiceAccount
            metadata:
              name: admin-user
              namespace: kubernetes-dashboard
            ---
            apiVersion: rbac.authorization.k8s.io/v1
            kind: ClusterRoleBinding
            metadata:
              name: admin-user-binding
            roleRef:
              apiGroup: rbac.authorization.k8s.io
              kind: ClusterRole
              name: cluster-admin
            subjects:
              - kind: ServiceAccount
                name: admin-user
                namespace: kubernetes-dashboard
            EOF2
          EOF

      - name: Output Dashboard Login Token
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.VM_HOST }} <<'EOF'
            TOKEN=$(kubectl -n kubernetes-dashboard get secret $(kubectl -n kubernetes-dashboard get secret | grep admin-user | awk '{print $1}') -o jsonpath="{.data.token}" | base64 -d)
            echo "Dashboard Login Token:"
            echo "$TOKEN"
          EOF
